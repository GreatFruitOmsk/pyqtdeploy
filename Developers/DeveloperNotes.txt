=================
 Developer Notes
=================

These are various notes, instructions and reminders for the pyqtdeploy
developer.


Updating pyqtdeploy When New Package Versions are Released
==========================================================

These notes assume that immediately prior releases are fully supported by
pyqtdeploy.

Also the package configurations assume the latest versions of Riverbank
packages are being used (whatever they happen to be).


Python
------

Patches
.......

Change to the source directory of the new Python version and run::

    pyqtdeploycli --package python --target android-32 configure

If the patches apply without error then there is nothing to do.

If the patches fail because of cosmetic changes then consider updating the
code that applies the patches to cope.

Otherwise generate a new set of patches in the patches directory.


Modules
.......

``diff`` the ``Lib`` directory, look for any new or removed ``import``
statements and update the Python standard library meta-data accordingly.


pyconfig.h
..........

For Windows see if there are any changes to ``PC/pyconfig.h``.  If so then copy
it to the ``configurations/pyconfig`` directory with an appropriate version
number.  Edit the file, add ``#define Py_NO_ENABLE_SHARED`` and replace the
``#define`` for ``HAVE_DYNAMIC_LOADING`` with ``@PY_DYNAMIC_LOADING@``.

For other platforms ``diff`` the ``pyconfig.h.in`` file to see if there are any
new configuration items.  Add any new ones to ``pyconfig.py``.


setup.py
........

See if there are any changes to ``setup.py`` and update the Python module
meta-data accordingly.


python.pro
..........

Run ``./configure`` for the new version and inspect the generated ``Makefile``.

Compare the value of ``PARSER_OBJS`` with the value of ``PARSER_SOURCES`` in
``python.pro``.

Compare the value of ``OBJECT_OBJS`` with the value of ``OBJECT_SOURCES`` in
``python.pro``.

Compare the value of ``PYTHON_OBJS`` with the value of ``PYTHON_SOURCES`` in
``python.pro``.  Note that ``frozen.o`` should be ignored.

Compare the value of ``MODULE_OBJS`` with the value of ``MODULE_SOURCES`` in
``python.pro``.

Compare the value of ``MODOBJS`` with the value of ``MOD_SOURCES`` in
``python.pro``.


_bootstrap.py
.............

For Python v3, check if ``Lib/importlib/_bootstrap.py`` has any changes and
update the builder's version if necessary.


Qt
--

There should be nothing to do.


SIP
---

There should be nothing to do.


PyQt5
-----

Changes are only required if a new PyQt5 module has been added.

Update the ``pyqt_modules`` entries in the PyQt5 configuration files.  If the
release supports a new Qt v5.x.0 release (with new modules) then create a new
section ``[Qt 5.x]``.  If the release supports a new Python module for an
existing Qt library then update the existing section.

Consider if the ``pyqt_disabled_features`` entry needs updating.  If so then
also update the QScintilla, PyQtChart and PyQtDataVisualization configuration
files.

Add the new modules to the metadata defined in ``pyqt5.py``


PyQt4
-----

There should be nothing to do.


QScintilla
----------

There should be nothing to do.


PyQtChart
---------

There should be nothing to do.


PyQtDataVisualization
---------------------

There should be nothing to do.


Deploying to Android
====================

Configuring the Environment
---------------------------

To configure the environment (assuming an OS/X host), run::

    export ANDROID_NDK_ROOT=/path/to/android-ndk-r9d
    export ANDROID_SDK_ROOT=/path/to/android-sdk-macosx
    export PATH=/path/to/apache-ant-x.y.z/bin:$PATH


Building a sysroot
------------------

To build a new sysroot, run::

    build-sysroot.py --target android-32 --clean --debug --all

To make the sysroot the default, run::

    rm /path/to/sysroot
    ln -s sysroot-android-32 /path/to/sysroot


Creating an Android Virtual Device
----------------------------------

To start the AVD Manager, run::

    $ANDROID_SDK_ROOT/tools/android avd

For any device ensure that ``Use Host GPU`` is enabled.


Building the .apk
-----------------

Once the application has been built (i.e. after running ``make``) then run::

    make install INSTALL_ROOT=deploy

To create a debug .apk, run::

    /path/to/Qtx.y.x/x.y/android_arm7/bin/androiddeployqt \
            --input android-lib*.so-deployment-settings.json \
            --output deploy

``QtApp-debug.apk`` can be found in the ``deploy/bin`` directory.


Deploying the .apk
------------------

When the AVD is running, run::

    $ANDROID_SDK_ROOT/platform-tools/adb install QtApp-debug.apk


Debugging Tips
--------------

To configure stdout and stderr to redirect to ``logcat``, run::

    $ANDROID_SDK_ROOT/platform-tools/adb shell stop
    $ANDROID_SDK_ROOT/platform-tools/adb shell setprop log.redirect-stdio true
    $ANDROID_SDK_ROOT/platform-tools/adb shell start

The adb server is flakely.  If ``adb devices`` doesn't show anything then run::

    $ANDROID_SDK_ROOT/platform-tools/adb kill-server
    $ANDROID_SDK_ROOT/platform-tools/adb start-server
